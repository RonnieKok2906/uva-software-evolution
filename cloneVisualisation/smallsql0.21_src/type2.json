
{
  "name":"smallsql0.21_src",
  "numberOfCloneClasses":24,
  "children": [
  {
    "name":"smallsql",
    "children": [
    {
      "name":"database",
      "children": [
      {
        "name": "CommandUpdate",
        "children": [
          {
            "name": "no clone",
            "size":36,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "StoreImpl",
        "children": [
          {
            "name": "no clone",
            "size":1308,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TableStorePage",
        "children": [
          {
            "name": "no clone",
            "size":31,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionDayOfWeek",
        "children": [
          {
            "name": "no clone",
            "size":10,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TableViewMap",
        "children": [
          {
            "name": "no clone",
            "size":22,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Command",
        "children": [
          {
            "name": "no clone",
            "size":87,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "FileIndex",
        "children": [
          {
            "name": "no clone",
            "size":40,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionExp",
        "children": [
          {
            "name": "no clone",
            "size":8,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionACos",
        "children": [
          {
            "name": "no clone",
            "size":8,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Index",
        "children": [
          {
            "name": "no clone",
            "size":368,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "CommandDrop",
        "children": [
          {
            "name": "no clone",
            "size":40,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionTan",
        "children": [
          {
            "name": "no clone",
            "size":8,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionCeiling",
        "children": [
          {
            "name": "no clone",
            "size":8,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionFloor",
        "children": [
          {
            "name": "no clone",
            "size":12,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "SSPreparedStatement",
        "children": [
          {
            "name": "no clone",
            "size":227,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Logger",
        "children": [
          {
            "name": "no clone",
            "size":18,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Money",
        "children": [
          {
            "name": "no clone",
            "size":81,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "SQLToken",
        "children": [
          {
            "name": "no clone",
            "size":22,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionReplace",
        "children": [
          {
            "name": "no clone",
            "size":61,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "JoinScroll",
        "children": [
          {
            "name": "no clone",
            "size":127,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionPower",
        "children": [
          {
            "name": "no clone",
            "size":11,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionRight",
        "children": [
          {
            "name": "no clone",
            "size":25,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionRound",
        "children": [
          {
            "name": "",
            "size":11,
            "cloneclass": "23",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/ExpressionFunctionRound.java</h3><table><tr><td>50</td><td>if(places &gt; 0){</td></tr><tr><td>51</td><td>for(int i=0; i&lt;places; i++){</td></tr><tr><td>52</td><td>factor *= 10;</td></tr><tr><td>53</td><td>}</td></tr><tr><td>54</td><td>value *= factor;</td></tr><tr><td>55</td><td>}else{</td></tr><tr><td>56</td><td>for(int i=0; i&gt;places; i--){</td></tr><tr><td>57</td><td>factor *= 10;</td></tr><tr><td>58</td><td>}</td></tr><tr><td>59</td><td>value /= factor;</td></tr><tr><td>60</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/ExpressionFunctionTruncate.java</h3><table><tr><td>50</td><td>if(places &gt; 0){</td></tr><tr><td>51</td><td>for(int i=0; i&lt;places; i++){</td></tr><tr><td>52</td><td>factor *= 10;</td></tr><tr><td>53</td><td>}</td></tr><tr><td>54</td><td>value *= factor;</td></tr><tr><td>55</td><td>}else{</td></tr><tr><td>56</td><td>for(int i=0; i&gt;places; i--){</td></tr><tr><td>57</td><td>factor *= 10;</td></tr><tr><td>58</td><td>}</td></tr><tr><td>59</td><td>value /= factor;</td></tr><tr><td>60</td><td>}</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":20,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "IndexDescriptions",
        "children": [
          {
            "name": "no clone",
            "size":72,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ForeignKey",
        "children": [
          {
            "name": "no clone",
            "size":16,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "SmallSQLException",
        "children": [
          {
            "name": "no clone",
            "size":96,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "SSStatement",
        "children": [
          {
            "name": "no clone",
            "size":256,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionYear",
        "children": [
          {
            "name": "no clone",
            "size":11,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Scrollable",
        "children": [
          {
            "name": "no clone",
            "size":149,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Join",
        "children": [
          {
            "name": "no clone",
            "size":161,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionRepeat",
        "children": [
          {
            "name": "no clone",
            "size":30,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ForeignKeys",
        "children": [
          {
            "name": "no clone",
            "size":27,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "StorePageLink",
        "children": [
          {
            "name": "no clone",
            "size":12,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ColumnExpression",
        "children": [
          {
            "name": "no clone",
            "size":31,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Mutable",
        "children": [
          {
            "name": "no clone",
            "size":4,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "LongList",
        "children": [
          {
            "name": "no clone",
            "size":33,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "DataSources",
        "children": [
          {
            "name": "no clone",
            "size":21,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Expression",
        "children": [
          {
            "name": "no clone",
            "size":135,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionDayOfMonth",
        "children": [
          {
            "name": "no clone",
            "size":11,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionRadians",
        "children": [
          {
            "name": "no clone",
            "size":8,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionATan",
        "children": [
          {
            "name": "no clone",
            "size":8,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "IndexDescription",
        "children": [
          {
            "name": "",
            "size":9,
            "cloneclass": "3",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexDescription.java</h3><table><tr><td>186</td><td>catch(Throwable e){</td></tr><tr><td>187</td><td>if(raFile != null)</td></tr><tr><td>188</td><td>try{</td></tr><tr><td>189</td><td>raFile.close();</td></tr><tr><td>190</td><td>}catch(Exception e2){</td></tr><tr><td>191</td><td>DriverManager.println(e2.toString());</td></tr><tr><td>192</td><td>}</td></tr><tr><td>193</td><td>throw SmallSQLException.createFromException(e);</td></tr><tr><td>194</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/TableView.java</h3><table><tr><td>105</td><td>catch(Throwable e){</td></tr><tr><td>106</td><td>if(raFile != null)</td></tr><tr><td>107</td><td>try{</td></tr><tr><td>108</td><td>raFile.close();</td></tr><tr><td>109</td><td>}catch(Exception e2){</td></tr><tr><td>110</td><td>DriverManager.println(e2.toString());</td></tr><tr><td>111</td><td>}</td></tr><tr><td>112</td><td>throw SmallSQLException.createFromException(e);</td></tr><tr><td>113</td><td>}</td></tr></table>"
          },
          {
            "name": "",
            "size":9,
            "cloneclass": "6",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexDescription.java</h3><table><tr><td>186</td><td>{</td></tr><tr><td>187</td><td>if(raFile != null)</td></tr><tr><td>188</td><td>try{</td></tr><tr><td>189</td><td>raFile.close();</td></tr><tr><td>190</td><td>}catch(Exception e2){</td></tr><tr><td>191</td><td>DriverManager.println(e2.toString());</td></tr><tr><td>192</td><td>}</td></tr><tr><td>193</td><td>throw SmallSQLException.createFromException(e);</td></tr><tr><td>194</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/TableView.java</h3><table><tr><td>105</td><td>{</td></tr><tr><td>106</td><td>if(raFile != null)</td></tr><tr><td>107</td><td>try{</td></tr><tr><td>108</td><td>raFile.close();</td></tr><tr><td>109</td><td>}catch(Exception e2){</td></tr><tr><td>110</td><td>DriverManager.println(e2.toString());</td></tr><tr><td>111</td><td>}</td></tr><tr><td>112</td><td>throw SmallSQLException.createFromException(e);</td></tr><tr><td>113</td><td>}</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":144,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionRand",
        "children": [
          {
            "name": "no clone",
            "size":15,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionATan2",
        "children": [
          {
            "name": "no clone",
            "size":11,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "IndexNodeScrollStatus",
        "children": [
          {
            "name": "no clone",
            "size":28,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "MemoryStream",
        "children": [
          {
            "name": "no clone",
            "size":103,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "LongLongList",
        "children": [
          {
            "name": "no clone",
            "size":41,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "DataSource",
        "children": [
          {
            "name": "no clone",
            "size":27,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionLocate",
        "children": [
          {
            "name": "no clone",
            "size":19,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionCos",
        "children": [
          {
            "name": "no clone",
            "size":8,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionReturnP1",
        "children": [
          {
            "name": "no clone",
            "size":61,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Distinct",
        "children": [
          {
            "name": "no clone",
            "size":73,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionDayOfYear",
        "children": [
          {
            "name": "no clone",
            "size":11,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Columns",
        "children": [
          {
            "name": "no clone",
            "size":48,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionSoundex",
        "children": [
          {
            "name": "no clone",
            "size":75,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Expressions",
        "children": [
          {
            "name": "no clone",
            "size":79,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "SSConnection",
        "children": [
          {
            "name": "no clone",
            "size":250,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionPI",
        "children": [
          {
            "name": "no clone",
            "size":10,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionReturnP1Number",
        "children": [
          {
            "name": "no clone",
            "size":44,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionDifference",
        "children": [
          {
            "name": "no clone",
            "size":21,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Identity",
        "children": [
          {
            "name": "no clone",
            "size":73,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "SQLTokenizer",
        "children": [
          {
            "name": "no clone",
            "size":837,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionSin",
        "children": [
          {
            "name": "no clone",
            "size":8,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Table",
        "children": [
          {
            "name": "",
            "size":7,
            "cloneclass": "22",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/Table.java</h3><table><tr><td>388</td><td>{</td></tr><tr><td>389</td><td>Iterator values = locks.values().iterator();</td></tr><tr><td>390</td><td>while(values.hasNext()){</td></tr><tr><td>391</td><td>TableStorePage lock = (TableStorePage)values.next();</td></tr><tr><td>392</td><td>if(lock.con != con) return null;</td></tr><tr><td>393</td><td>}</td></tr><tr><td>394</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/Table.java</h3><table><tr><td>358</td><td>{</td></tr><tr><td>359</td><td>Iterator values = locks.values().iterator();</td></tr><tr><td>360</td><td>while(values.hasNext()){</td></tr><tr><td>361</td><td>TableStorePage lock = (TableStorePage)values.next();</td></tr><tr><td>362</td><td>if(lock.con != con) return null;</td></tr><tr><td>363</td><td>}</td></tr><tr><td>364</td><td>}</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/Table.java</h3><table><tr><td>370</td><td>{</td></tr><tr><td>371</td><td>Iterator values = locks.values().iterator();</td></tr><tr><td>372</td><td>while(values.hasNext()){</td></tr><tr><td>373</td><td>TableStorePage lock = (TableStorePage)values.next();</td></tr><tr><td>374</td><td>if(lock.con != con) return null;</td></tr><tr><td>375</td><td>}</td></tr><tr><td>376</td><td>}</td></tr></table>"
          },
          {
            "name": "",
            "size":7,
            "cloneclass": "22",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/Table.java</h3><table><tr><td>358</td><td>{</td></tr><tr><td>359</td><td>Iterator values = locks.values().iterator();</td></tr><tr><td>360</td><td>while(values.hasNext()){</td></tr><tr><td>361</td><td>TableStorePage lock = (TableStorePage)values.next();</td></tr><tr><td>362</td><td>if(lock.con != con) return null;</td></tr><tr><td>363</td><td>}</td></tr><tr><td>364</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/Table.java</h3><table><tr><td>388</td><td>{</td></tr><tr><td>389</td><td>Iterator values = locks.values().iterator();</td></tr><tr><td>390</td><td>while(values.hasNext()){</td></tr><tr><td>391</td><td>TableStorePage lock = (TableStorePage)values.next();</td></tr><tr><td>392</td><td>if(lock.con != con) return null;</td></tr><tr><td>393</td><td>}</td></tr><tr><td>394</td><td>}</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/Table.java</h3><table><tr><td>370</td><td>{</td></tr><tr><td>371</td><td>Iterator values = locks.values().iterator();</td></tr><tr><td>372</td><td>while(values.hasNext()){</td></tr><tr><td>373</td><td>TableStorePage lock = (TableStorePage)values.next();</td></tr><tr><td>374</td><td>if(lock.con != con) return null;</td></tr><tr><td>375</td><td>}</td></tr><tr><td>376</td><td>}</td></tr></table>"
          },
          {
            "name": "",
            "size":7,
            "cloneclass": "22",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/Table.java</h3><table><tr><td>370</td><td>{</td></tr><tr><td>371</td><td>Iterator values = locks.values().iterator();</td></tr><tr><td>372</td><td>while(values.hasNext()){</td></tr><tr><td>373</td><td>TableStorePage lock = (TableStorePage)values.next();</td></tr><tr><td>374</td><td>if(lock.con != con) return null;</td></tr><tr><td>375</td><td>}</td></tr><tr><td>376</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/Table.java</h3><table><tr><td>388</td><td>{</td></tr><tr><td>389</td><td>Iterator values = locks.values().iterator();</td></tr><tr><td>390</td><td>while(values.hasNext()){</td></tr><tr><td>391</td><td>TableStorePage lock = (TableStorePage)values.next();</td></tr><tr><td>392</td><td>if(lock.con != con) return null;</td></tr><tr><td>393</td><td>}</td></tr><tr><td>394</td><td>}</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/Table.java</h3><table><tr><td>358</td><td>{</td></tr><tr><td>359</td><td>Iterator values = locks.values().iterator();</td></tr><tr><td>360</td><td>while(values.hasNext()){</td></tr><tr><td>361</td><td>TableStorePage lock = (TableStorePage)values.next();</td></tr><tr><td>362</td><td>if(lock.con != con) return null;</td></tr><tr><td>363</td><td>}</td></tr><tr><td>364</td><td>}</td></tr></table>"
          },
          {
            "name": "",
            "size":7,
            "cloneclass": "4",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/Table.java</h3><table><tr><td>388</td><td>if(serializeConnections.size() &gt; 0){</td></tr><tr><td>389</td><td>Iterator values = locks.values().iterator();</td></tr><tr><td>390</td><td>while(values.hasNext()){</td></tr><tr><td>391</td><td>TableStorePage lock = (TableStorePage)values.next();</td></tr><tr><td>392</td><td>if(lock.con != con) return null;</td></tr><tr><td>393</td><td>}</td></tr><tr><td>394</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/Table.java</h3><table><tr><td>370</td><td>if(serializeConnections.size() &gt; 0){</td></tr><tr><td>371</td><td>Iterator values = locks.values().iterator();</td></tr><tr><td>372</td><td>while(values.hasNext()){</td></tr><tr><td>373</td><td>TableStorePage lock = (TableStorePage)values.next();</td></tr><tr><td>374</td><td>if(lock.con != con) return null;</td></tr><tr><td>375</td><td>}</td></tr><tr><td>376</td><td>}</td></tr></table>"
          },
          {
            "name": "",
            "size":7,
            "cloneclass": "4",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/Table.java</h3><table><tr><td>370</td><td>if(serializeConnections.size() &gt; 0){</td></tr><tr><td>371</td><td>Iterator values = locks.values().iterator();</td></tr><tr><td>372</td><td>while(values.hasNext()){</td></tr><tr><td>373</td><td>TableStorePage lock = (TableStorePage)values.next();</td></tr><tr><td>374</td><td>if(lock.con != con) return null;</td></tr><tr><td>375</td><td>}</td></tr><tr><td>376</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/Table.java</h3><table><tr><td>388</td><td>if(serializeConnections.size() &gt; 0){</td></tr><tr><td>389</td><td>Iterator values = locks.values().iterator();</td></tr><tr><td>390</td><td>while(values.hasNext()){</td></tr><tr><td>391</td><td>TableStorePage lock = (TableStorePage)values.next();</td></tr><tr><td>392</td><td>if(lock.con != con) return null;</td></tr><tr><td>393</td><td>}</td></tr><tr><td>394</td><td>}</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":357,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Strings",
        "children": [
          {
            "name": "no clone",
            "size":32,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionMinute",
        "children": [
          {
            "name": "no clone",
            "size":11,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionLTrim",
        "children": [
          {
            "name": "no clone",
            "size":31,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionMonth",
        "children": [
          {
            "name": "no clone",
            "size":11,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "CommandTable",
        "children": [
          {
            "name": "no clone",
            "size":78,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionTruncate",
        "children": [
          {
            "name": "",
            "size":11,
            "cloneclass": "23",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/ExpressionFunctionTruncate.java</h3><table><tr><td>50</td><td>if(places &gt; 0){</td></tr><tr><td>51</td><td>for(int i=0; i&lt;places; i++){</td></tr><tr><td>52</td><td>factor *= 10;</td></tr><tr><td>53</td><td>}</td></tr><tr><td>54</td><td>value *= factor;</td></tr><tr><td>55</td><td>}else{</td></tr><tr><td>56</td><td>for(int i=0; i&gt;places; i--){</td></tr><tr><td>57</td><td>factor *= 10;</td></tr><tr><td>58</td><td>}</td></tr><tr><td>59</td><td>value /= factor;</td></tr><tr><td>60</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/ExpressionFunctionRound.java</h3><table><tr><td>50</td><td>if(places &gt; 0){</td></tr><tr><td>51</td><td>for(int i=0; i&lt;places; i++){</td></tr><tr><td>52</td><td>factor *= 10;</td></tr><tr><td>53</td><td>}</td></tr><tr><td>54</td><td>value *= factor;</td></tr><tr><td>55</td><td>}else{</td></tr><tr><td>56</td><td>for(int i=0; i&gt;places; i--){</td></tr><tr><td>57</td><td>factor *= 10;</td></tr><tr><td>58</td><td>}</td></tr><tr><td>59</td><td>value /= factor;</td></tr><tr><td>60</td><td>}</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":20,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Where",
        "children": [
          {
            "name": "no clone",
            "size":100,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "View",
        "children": [
          {
            "name": "no clone",
            "size":74,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "MutableFloat",
        "children": [
          {
            "name": "no clone",
            "size":25,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionReturnFloat",
        "children": [
          {
            "name": "no clone",
            "size":40,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "MutableDouble",
        "children": [
          {
            "name": "no clone",
            "size":25,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionLength",
        "children": [
          {
            "name": "no clone",
            "size":13,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "SortedResult",
        "children": [
          {
            "name": "no clone",
            "size":215,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionConvert",
        "children": [
          {
            "name": "no clone",
            "size":185,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionIIF",
        "children": [
          {
            "name": "no clone",
            "size":65,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionSqrt",
        "children": [
          {
            "name": "no clone",
            "size":8,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Lobs",
        "children": [
          {
            "name": "no clone",
            "size":12,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "CommandDelete",
        "children": [
          {
            "name": "no clone",
            "size":16,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionCot",
        "children": [
          {
            "name": "no clone",
            "size":8,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "SSDriver",
        "children": [
          {
            "name": "no clone",
            "size":72,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "MemoryResult",
        "children": [
          {
            "name": "",
            "size":7,
            "cloneclass": "21",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/MemoryResult.java</h3><table><tr><td>98</td><td>/**</td></tr><tr><td>99</td><td>     * Add a column definition. This is used from the SQLParser.</td></tr><tr><td>100</td><td>     * @see SQLParser#createTable</td></tr><tr><td>101</td><td>     */</td></tr><tr><td>102</td><td>void addColumn( Column column ){</td></tr><tr><td>103</td><td>columns.add( column );</td></tr><tr><td>104</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/CommandCreateView.java</h3><table><tr><td>48</td><td>/**</td></tr><tr><td>49</td><td>     * Add a column definition. This is used from the SQLParser.</td></tr><tr><td>50</td><td>     * @see SQLParser#createTable</td></tr><tr><td>51</td><td>     */</td></tr><tr><td>52</td><td>void addColumn( Column column ){</td></tr><tr><td>53</td><td>columns.add( column );</td></tr><tr><td>54</td><td>}</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":176,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Utils",
        "children": [
          {
            "name": "",
            "size":8,
            "cloneclass": "10",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/Utils.java</h3><table><tr><td>205</td><td>private static String bytes2hex( byte[] bytes ){</td></tr><tr><td>206</td><td>StringBuffer buf = new StringBuffer(bytes.length &lt;&lt; 1);</td></tr><tr><td>207</td><td>for(int i=0; i&lt;bytes.length; i++){</td></tr><tr><td>208</td><td>buf.append( digits[ (bytes[i] &gt;&gt; 4) & 0x0F ] );</td></tr><tr><td>209</td><td>buf.append( digits[ (bytes[i]     ) & 0x0F ] );</td></tr><tr><td>210</td><td>}</td></tr><tr><td>211</td><td>return buf.toString();</td></tr><tr><td>212</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/BasicTestCase.java</h3><table><tr><td>102</td><td>private static String bytes2hex( byte[] bytes ){</td></tr><tr><td>103</td><td>StringBuffer buf = new StringBuffer(bytes.length &lt;&lt; 1);</td></tr><tr><td>104</td><td>for(int i=0; i&lt;bytes.length; i++){</td></tr><tr><td>105</td><td>buf.append( digits[ (bytes[i] &gt;&gt; 4) & 0x0F ] );</td></tr><tr><td>106</td><td>buf.append( digits[ (bytes[i]     ) & 0x0F ] );</td></tr><tr><td>107</td><td>}</td></tr><tr><td>108</td><td>return buf.toString();</td></tr><tr><td>109</td><td>}</td></tr></table>"
          },
          {
            "name": "",
            "size":8,
            "cloneclass": "16",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/Utils.java</h3><table><tr><td>205</td><td>{</td></tr><tr><td>206</td><td>        StringBuffer buf = new StringBuffer(bytes.length &lt;&lt; 1);</td></tr><tr><td>207</td><td>        for(int i=0; i&lt;bytes.length; i++){</td></tr><tr><td>208</td><td>            buf.append( digits[ (bytes[i] &gt;&gt; 4) & 0x0F ] );</td></tr><tr><td>209</td><td>            buf.append( digits[ (bytes[i]     ) & 0x0F ] );</td></tr><tr><td>210</td><td>        }</td></tr><tr><td>211</td><td>        return buf.toString();</td></tr><tr><td>212</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/BasicTestCase.java</h3><table><tr><td>102</td><td>{</td></tr><tr><td>103</td><td>        StringBuffer buf = new StringBuffer(bytes.length &lt;&lt; 1);</td></tr><tr><td>104</td><td>        for(int i=0; i&lt;bytes.length; i++){</td></tr><tr><td>105</td><td>            buf.append( digits[ (bytes[i] &gt;&gt; 4) & 0x0F ] );</td></tr><tr><td>106</td><td>            buf.append( digits[ (bytes[i]     ) & 0x0F ] );</td></tr><tr><td>107</td><td>        }</td></tr><tr><td>108</td><td>        return buf.toString();</td></tr><tr><td>109</td><td>    }</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":338,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionASin",
        "children": [
          {
            "name": "no clone",
            "size":8,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Store",
        "children": [
          {
            "name": "no clone",
            "size":24,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionSign",
        "children": [
          {
            "name": "no clone",
            "size":43,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "SQLParser",
        "children": [
          {
            "name": "no clone",
            "size":1668,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "CreateFile",
        "children": [
          {
            "name": "no clone",
            "size":41,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "SSResultSet",
        "children": [
          {
            "name": "no clone",
            "size":704,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionArithmetic",
        "children": [
          {
            "name": "no clone",
            "size":858,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ViewResult",
        "children": [
          {
            "name": "no clone",
            "size":136,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionInsert",
        "children": [
          {
            "name": "no clone",
            "size":40,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "SSSavepoint",
        "children": [
          {
            "name": "no clone",
            "size":18,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionAscii",
        "children": [
          {
            "name": "no clone",
            "size":19,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "DateTime",
        "children": [
          {
            "name": "no clone",
            "size":658,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "StoreNoCurrentRow",
        "children": [
          {
            "name": "no clone",
            "size":52,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunction",
        "children": [
          {
            "name": "no clone",
            "size":59,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "IndexScrollStatus",
        "children": [
          {
            "name": "",
            "size":11,
            "cloneclass": "14",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java</h3><table><tr><td>120</td><td>{</td></tr><tr><td>121</td><td>if(status.nodeValue instanceof IndexNode){</td></tr><tr><td>122</td><td>level++;</td></tr><tr><td>123</td><td>nodeStack.push(</td></tr><tr><td>124</td><td>new IndexNodeScrollStatus( (IndexNode)status.nodeValue, </td></tr><tr><td>125</td><td>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), </td></tr><tr><td>126</td><td>scroll, level));</td></tr><tr><td>127</td><td>continue;</td></tr><tr><td>128</td><td>}else</td></tr><tr><td>129</td><td>return getReturnValue(status.nodeValue);</td></tr><tr><td>130</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java</h3><table><tr><td>89</td><td>{</td></tr><tr><td>90</td><td>if(status.nodeValue instanceof IndexNode){</td></tr><tr><td>91</td><td>level++;</td></tr><tr><td>92</td><td>nodeStack.push(</td></tr><tr><td>93</td><td>new IndexNodeScrollStatus( (IndexNode)status.nodeValue, </td></tr><tr><td>94</td><td>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), </td></tr><tr><td>95</td><td>scroll, level));</td></tr><tr><td>96</td><td>continue;</td></tr><tr><td>97</td><td>}else</td></tr><tr><td>98</td><td>return getReturnValue(status.nodeValue);</td></tr><tr><td>99</td><td>}</td></tr></table>"
          },
          {
            "name": "",
            "size":11,
            "cloneclass": "14",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java</h3><table><tr><td>89</td><td>{</td></tr><tr><td>90</td><td>if(status.nodeValue instanceof IndexNode){</td></tr><tr><td>91</td><td>level++;</td></tr><tr><td>92</td><td>nodeStack.push(</td></tr><tr><td>93</td><td>new IndexNodeScrollStatus( (IndexNode)status.nodeValue, </td></tr><tr><td>94</td><td>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), </td></tr><tr><td>95</td><td>scroll, level));</td></tr><tr><td>96</td><td>continue;</td></tr><tr><td>97</td><td>}else</td></tr><tr><td>98</td><td>return getReturnValue(status.nodeValue);</td></tr><tr><td>99</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java</h3><table><tr><td>120</td><td>{</td></tr><tr><td>121</td><td>if(status.nodeValue instanceof IndexNode){</td></tr><tr><td>122</td><td>level++;</td></tr><tr><td>123</td><td>nodeStack.push(</td></tr><tr><td>124</td><td>new IndexNodeScrollStatus( (IndexNode)status.nodeValue, </td></tr><tr><td>125</td><td>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), </td></tr><tr><td>126</td><td>scroll, level));</td></tr><tr><td>127</td><td>continue;</td></tr><tr><td>128</td><td>}else</td></tr><tr><td>129</td><td>return getReturnValue(status.nodeValue);</td></tr><tr><td>130</td><td>}</td></tr></table>"
          },
          {
            "name": "",
            "size":12,
            "cloneclass": "24",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java</h3><table><tr><td>120</td><td>if(status.nodeValue != null){</td></tr><tr><td>121</td><td>if(status.nodeValue instanceof IndexNode){</td></tr><tr><td>122</td><td>level++;</td></tr><tr><td>123</td><td>nodeStack.push(</td></tr><tr><td>124</td><td>new IndexNodeScrollStatus( (IndexNode)status.nodeValue, </td></tr><tr><td>125</td><td>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), </td></tr><tr><td>126</td><td>scroll, level));</td></tr><tr><td>127</td><td>continue;</td></tr><tr><td>128</td><td>}else</td></tr><tr><td>129</td><td>return getReturnValue(status.nodeValue);</td></tr><tr><td>130</td><td>}</td></tr><tr><td>131</td><td>//There is no RowOffset in this node</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java</h3><table><tr><td>89</td><td>if(status.nodeValue != null){</td></tr><tr><td>90</td><td>if(status.nodeValue instanceof IndexNode){</td></tr><tr><td>91</td><td>level++;</td></tr><tr><td>92</td><td>nodeStack.push(</td></tr><tr><td>93</td><td>new IndexNodeScrollStatus( (IndexNode)status.nodeValue, </td></tr><tr><td>94</td><td>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), </td></tr><tr><td>95</td><td>scroll, level));</td></tr><tr><td>96</td><td>continue;</td></tr><tr><td>97</td><td>}else</td></tr><tr><td>98</td><td>return getReturnValue(status.nodeValue);</td></tr><tr><td>99</td><td>}</td></tr><tr><td>100</td><td>//There is no RowOffset in this node</td></tr></table>"
          },
          {
            "name": "",
            "size":12,
            "cloneclass": "24",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java</h3><table><tr><td>89</td><td>if(status.nodeValue != null){</td></tr><tr><td>90</td><td>if(status.nodeValue instanceof IndexNode){</td></tr><tr><td>91</td><td>level++;</td></tr><tr><td>92</td><td>nodeStack.push(</td></tr><tr><td>93</td><td>new IndexNodeScrollStatus( (IndexNode)status.nodeValue, </td></tr><tr><td>94</td><td>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), </td></tr><tr><td>95</td><td>scroll, level));</td></tr><tr><td>96</td><td>continue;</td></tr><tr><td>97</td><td>}else</td></tr><tr><td>98</td><td>return getReturnValue(status.nodeValue);</td></tr><tr><td>99</td><td>}</td></tr><tr><td>100</td><td>//There is no RowOffset in this node</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java</h3><table><tr><td>120</td><td>if(status.nodeValue != null){</td></tr><tr><td>121</td><td>if(status.nodeValue instanceof IndexNode){</td></tr><tr><td>122</td><td>level++;</td></tr><tr><td>123</td><td>nodeStack.push(</td></tr><tr><td>124</td><td>new IndexNodeScrollStatus( (IndexNode)status.nodeValue, </td></tr><tr><td>125</td><td>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), </td></tr><tr><td>126</td><td>scroll, level));</td></tr><tr><td>127</td><td>continue;</td></tr><tr><td>128</td><td>}else</td></tr><tr><td>129</td><td>return getReturnValue(status.nodeValue);</td></tr><tr><td>130</td><td>}</td></tr><tr><td>131</td><td>//There is no RowOffset in this node</td></tr></table>"
          },
          {
            "name": "",
            "size":8,
            "cloneclass": "12",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java</h3><table><tr><td>121</td><td>{</td></tr><tr><td>122</td><td>level++;</td></tr><tr><td>123</td><td>nodeStack.push(</td></tr><tr><td>124</td><td>new IndexNodeScrollStatus( (IndexNode)status.nodeValue, </td></tr><tr><td>125</td><td>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), </td></tr><tr><td>126</td><td>scroll, level));</td></tr><tr><td>127</td><td>continue;</td></tr><tr><td>128</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java</h3><table><tr><td>90</td><td>{</td></tr><tr><td>91</td><td>level++;</td></tr><tr><td>92</td><td>nodeStack.push(</td></tr><tr><td>93</td><td>new IndexNodeScrollStatus( (IndexNode)status.nodeValue, </td></tr><tr><td>94</td><td>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), </td></tr><tr><td>95</td><td>scroll, level));</td></tr><tr><td>96</td><td>continue;</td></tr><tr><td>97</td><td>}</td></tr></table>"
          },
          {
            "name": "",
            "size":8,
            "cloneclass": "12",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java</h3><table><tr><td>90</td><td>{</td></tr><tr><td>91</td><td>level++;</td></tr><tr><td>92</td><td>nodeStack.push(</td></tr><tr><td>93</td><td>new IndexNodeScrollStatus( (IndexNode)status.nodeValue, </td></tr><tr><td>94</td><td>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), </td></tr><tr><td>95</td><td>scroll, level));</td></tr><tr><td>96</td><td>continue;</td></tr><tr><td>97</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java</h3><table><tr><td>121</td><td>{</td></tr><tr><td>122</td><td>level++;</td></tr><tr><td>123</td><td>nodeStack.push(</td></tr><tr><td>124</td><td>new IndexNodeScrollStatus( (IndexNode)status.nodeValue, </td></tr><tr><td>125</td><td>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), </td></tr><tr><td>126</td><td>scroll, level));</td></tr><tr><td>127</td><td>continue;</td></tr><tr><td>128</td><td>}</td></tr></table>"
          },
          {
            "name": "",
            "size":9,
            "cloneclass": "17",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java</h3><table><tr><td>121</td><td>if(status.nodeValue instanceof IndexNode){</td></tr><tr><td>122</td><td>level++;</td></tr><tr><td>123</td><td>nodeStack.push(</td></tr><tr><td>124</td><td>new IndexNodeScrollStatus( (IndexNode)status.nodeValue, </td></tr><tr><td>125</td><td>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), </td></tr><tr><td>126</td><td>scroll, level));</td></tr><tr><td>127</td><td>continue;</td></tr><tr><td>128</td><td>}else</td></tr><tr><td>129</td><td>return getReturnValue(status.nodeValue);</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java</h3><table><tr><td>90</td><td>if(status.nodeValue instanceof IndexNode){</td></tr><tr><td>91</td><td>level++;</td></tr><tr><td>92</td><td>nodeStack.push(</td></tr><tr><td>93</td><td>new IndexNodeScrollStatus( (IndexNode)status.nodeValue, </td></tr><tr><td>94</td><td>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), </td></tr><tr><td>95</td><td>scroll, level));</td></tr><tr><td>96</td><td>continue;</td></tr><tr><td>97</td><td>}else</td></tr><tr><td>98</td><td>return getReturnValue(status.nodeValue);</td></tr></table>"
          },
          {
            "name": "",
            "size":9,
            "cloneclass": "17",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java</h3><table><tr><td>90</td><td>if(status.nodeValue instanceof IndexNode){</td></tr><tr><td>91</td><td>level++;</td></tr><tr><td>92</td><td>nodeStack.push(</td></tr><tr><td>93</td><td>new IndexNodeScrollStatus( (IndexNode)status.nodeValue, </td></tr><tr><td>94</td><td>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), </td></tr><tr><td>95</td><td>scroll, level));</td></tr><tr><td>96</td><td>continue;</td></tr><tr><td>97</td><td>}else</td></tr><tr><td>98</td><td>return getReturnValue(status.nodeValue);</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java</h3><table><tr><td>121</td><td>if(status.nodeValue instanceof IndexNode){</td></tr><tr><td>122</td><td>level++;</td></tr><tr><td>123</td><td>nodeStack.push(</td></tr><tr><td>124</td><td>new IndexNodeScrollStatus( (IndexNode)status.nodeValue, </td></tr><tr><td>125</td><td>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), </td></tr><tr><td>126</td><td>scroll, level));</td></tr><tr><td>127</td><td>continue;</td></tr><tr><td>128</td><td>}else</td></tr><tr><td>129</td><td>return getReturnValue(status.nodeValue);</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":22,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionName",
        "children": [
          {
            "name": "no clone",
            "size":129,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionMod",
        "children": [
          {
            "name": "no clone",
            "size":11,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "CommandCreateView",
        "children": [
          {
            "name": "",
            "size":7,
            "cloneclass": "21",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/CommandCreateView.java</h3><table><tr><td>48</td><td>/**</td></tr><tr><td>49</td><td>     * Add a column definition. This is used from the SQLParser.</td></tr><tr><td>50</td><td>     * @see SQLParser#createTable</td></tr><tr><td>51</td><td>     */</td></tr><tr><td>52</td><td>void addColumn( Column column ){</td></tr><tr><td>53</td><td>columns.add( column );</td></tr><tr><td>54</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/MemoryResult.java</h3><table><tr><td>98</td><td>/**</td></tr><tr><td>99</td><td>     * Add a column definition. This is used from the SQLParser.</td></tr><tr><td>100</td><td>     * @see SQLParser#createTable</td></tr><tr><td>101</td><td>     */</td></tr><tr><td>102</td><td>void addColumn( Column column ){</td></tr><tr><td>103</td><td>columns.add( column );</td></tr><tr><td>104</td><td>}</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":9,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "JoinScrollIndex",
        "children": [
          {
            "name": "no clone",
            "size":57,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TableViewResult",
        "children": [
          {
            "name": "no clone",
            "size":47,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "NoFromResult",
        "children": [
          {
            "name": "no clone",
            "size":77,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionReturnP1StringAndBinary",
        "children": [
          {
            "name": "no clone",
            "size":36,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "LongTreeList",
        "children": [
          {
            "name": "no clone",
            "size":318,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TableResult",
        "children": [
          {
            "name": "no clone",
            "size":255,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionReturnInt",
        "children": [
          {
            "name": "no clone",
            "size":36,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionHour",
        "children": [
          {
            "name": "no clone",
            "size":11,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TableView",
        "children": [
          {
            "name": "",
            "size":9,
            "cloneclass": "3",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/TableView.java</h3><table><tr><td>105</td><td>catch(Throwable e){</td></tr><tr><td>106</td><td>if(raFile != null)</td></tr><tr><td>107</td><td>try{</td></tr><tr><td>108</td><td>raFile.close();</td></tr><tr><td>109</td><td>}catch(Exception e2){</td></tr><tr><td>110</td><td>DriverManager.println(e2.toString());</td></tr><tr><td>111</td><td>}</td></tr><tr><td>112</td><td>throw SmallSQLException.createFromException(e);</td></tr><tr><td>113</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexDescription.java</h3><table><tr><td>186</td><td>catch(Throwable e){</td></tr><tr><td>187</td><td>if(raFile != null)</td></tr><tr><td>188</td><td>try{</td></tr><tr><td>189</td><td>raFile.close();</td></tr><tr><td>190</td><td>}catch(Exception e2){</td></tr><tr><td>191</td><td>DriverManager.println(e2.toString());</td></tr><tr><td>192</td><td>}</td></tr><tr><td>193</td><td>throw SmallSQLException.createFromException(e);</td></tr><tr><td>194</td><td>}</td></tr></table>"
          },
          {
            "name": "",
            "size":9,
            "cloneclass": "6",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/TableView.java</h3><table><tr><td>105</td><td>{</td></tr><tr><td>106</td><td>if(raFile != null)</td></tr><tr><td>107</td><td>try{</td></tr><tr><td>108</td><td>raFile.close();</td></tr><tr><td>109</td><td>}catch(Exception e2){</td></tr><tr><td>110</td><td>DriverManager.println(e2.toString());</td></tr><tr><td>111</td><td>}</td></tr><tr><td>112</td><td>throw SmallSQLException.createFromException(e);</td></tr><tr><td>113</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/IndexDescription.java</h3><table><tr><td>186</td><td>{</td></tr><tr><td>187</td><td>if(raFile != null)</td></tr><tr><td>188</td><td>try{</td></tr><tr><td>189</td><td>raFile.close();</td></tr><tr><td>190</td><td>}catch(Exception e2){</td></tr><tr><td>191</td><td>DriverManager.println(e2.toString());</td></tr><tr><td>192</td><td>}</td></tr><tr><td>193</td><td>throw SmallSQLException.createFromException(e);</td></tr><tr><td>194</td><td>}</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":83,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "RowSource",
        "children": [
          {
            "name": "no clone",
            "size":49,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TableStorePageInsert",
        "children": [
          {
            "name": "no clone",
            "size":19,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionChar",
        "children": [
          {
            "name": "no clone",
            "size":17,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionSubstring",
        "children": [
          {
            "name": "no clone",
            "size":40,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "MutableInteger",
        "children": [
          {
            "name": "no clone",
            "size":25,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "SSCallableStatement",
        "children": [
          {
            "name": "",
            "size":7,
            "cloneclass": "7",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/SSCallableStatement.java</h3><table><tr><td>118</td><td>try{</td></tr><tr><td>119</td><td>            Expression expr = getValue(i);</td></tr><tr><td>120</td><td>            wasNull = expr.isNull();</td></tr><tr><td>121</td><td>            return expr.getLong();</td></tr><tr><td>122</td><td>        }catch(Exception e){</td></tr><tr><td>123</td><td>            throw SmallSQLException.createFromException( e );</td></tr><tr><td>124</td><td>        }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/SSCallableStatement.java</h3><table><tr><td>136</td><td>try{</td></tr><tr><td>137</td><td>            Expression expr = getValue(i);</td></tr><tr><td>138</td><td>            wasNull = expr.isNull();</td></tr><tr><td>139</td><td>            return expr.getLong();</td></tr><tr><td>140</td><td>        }catch(Exception e){</td></tr><tr><td>141</td><td>            throw SmallSQLException.createFromException( e );</td></tr><tr><td>142</td><td>        }</td></tr></table>"
          },
          {
            "name": "",
            "size":7,
            "cloneclass": "7",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/SSCallableStatement.java</h3><table><tr><td>136</td><td>try{</td></tr><tr><td>137</td><td>            Expression expr = getValue(i);</td></tr><tr><td>138</td><td>            wasNull = expr.isNull();</td></tr><tr><td>139</td><td>            return expr.getLong();</td></tr><tr><td>140</td><td>        }catch(Exception e){</td></tr><tr><td>141</td><td>            throw SmallSQLException.createFromException( e );</td></tr><tr><td>142</td><td>        }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/SSCallableStatement.java</h3><table><tr><td>118</td><td>try{</td></tr><tr><td>119</td><td>            Expression expr = getValue(i);</td></tr><tr><td>120</td><td>            wasNull = expr.isNull();</td></tr><tr><td>121</td><td>            return expr.getLong();</td></tr><tr><td>122</td><td>        }catch(Exception e){</td></tr><tr><td>123</td><td>            throw SmallSQLException.createFromException( e );</td></tr><tr><td>124</td><td>        }</td></tr></table>"
          },
          {
            "name": "",
            "size":9,
            "cloneclass": "20",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/SSCallableStatement.java</h3><table><tr><td>135</td><td>{</td></tr><tr><td>136</td><td>        try{</td></tr><tr><td>137</td><td>            Expression expr = getValue(i);</td></tr><tr><td>138</td><td>            wasNull = expr.isNull();</td></tr><tr><td>139</td><td>            return expr.getLong();</td></tr><tr><td>140</td><td>        }catch(Exception e){</td></tr><tr><td>141</td><td>            throw SmallSQLException.createFromException( e );</td></tr><tr><td>142</td><td>        }</td></tr><tr><td>143</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/SSCallableStatement.java</h3><table><tr><td>117</td><td>{</td></tr><tr><td>118</td><td>        try{</td></tr><tr><td>119</td><td>            Expression expr = getValue(i);</td></tr><tr><td>120</td><td>            wasNull = expr.isNull();</td></tr><tr><td>121</td><td>            return expr.getLong();</td></tr><tr><td>122</td><td>        }catch(Exception e){</td></tr><tr><td>123</td><td>            throw SmallSQLException.createFromException( e );</td></tr><tr><td>124</td><td>        }</td></tr><tr><td>125</td><td>    }</td></tr></table>"
          },
          {
            "name": "",
            "size":9,
            "cloneclass": "20",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/SSCallableStatement.java</h3><table><tr><td>117</td><td>{</td></tr><tr><td>118</td><td>        try{</td></tr><tr><td>119</td><td>            Expression expr = getValue(i);</td></tr><tr><td>120</td><td>            wasNull = expr.isNull();</td></tr><tr><td>121</td><td>            return expr.getLong();</td></tr><tr><td>122</td><td>        }catch(Exception e){</td></tr><tr><td>123</td><td>            throw SmallSQLException.createFromException( e );</td></tr><tr><td>124</td><td>        }</td></tr><tr><td>125</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/SSCallableStatement.java</h3><table><tr><td>135</td><td>{</td></tr><tr><td>136</td><td>        try{</td></tr><tr><td>137</td><td>            Expression expr = getValue(i);</td></tr><tr><td>138</td><td>            wasNull = expr.isNull();</td></tr><tr><td>139</td><td>            return expr.getLong();</td></tr><tr><td>140</td><td>        }catch(Exception e){</td></tr><tr><td>141</td><td>            throw SmallSQLException.createFromException( e );</td></tr><tr><td>142</td><td>        }</td></tr><tr><td>143</td><td>    }</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":311,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "GroupResult",
        "children": [
          {
            "name": "no clone",
            "size":154,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionCharLen",
        "children": [
          {
            "name": "no clone",
            "size":14,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "SSResultSetMetaData",
        "children": [
          {
            "name": "no clone",
            "size":244,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionCase",
        "children": [
          {
            "name": "no clone",
            "size":116,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionLeft",
        "children": [
          {
            "name": "no clone",
            "size":25,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "UnionAll",
        "children": [
          {
            "name": "no clone",
            "size":143,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionOctetLen",
        "children": [
          {
            "name": "no clone",
            "size":15,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "CommandSelect",
        "children": [
          {
            "name": "no clone",
            "size":364,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionUCase",
        "children": [
          {
            "name": "no clone",
            "size":17,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "FileIndexNode",
        "children": [
          {
            "name": "no clone",
            "size":48,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionReturnString",
        "children": [
          {
            "name": "no clone",
            "size":37,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "CommandSet",
        "children": [
          {
            "name": "no clone",
            "size":20,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionInSelect",
        "children": [
          {
            "name": "no clone",
            "size":30,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionValue",
        "children": [
          {
            "name": "no clone",
            "size":564,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionTimestampAdd",
        "children": [
          {
            "name": "no clone",
            "size":77,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "StorePageMap",
        "children": [
          {
            "name": "no clone",
            "size":119,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionRTrim",
        "children": [
          {
            "name": "no clone",
            "size":29,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionAbs",
        "children": [
          {
            "name": "no clone",
            "size":64,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionBitLen",
        "children": [
          {
            "name": "no clone",
            "size":15,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "IndexNode",
        "children": [
          {
            "name": "no clone",
            "size":251,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "StorePage",
        "children": [
          {
            "name": "no clone",
            "size":42,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Column",
        "children": [
          {
            "name": "no clone",
            "size":110,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "CommandCreateDatabase",
        "children": [
          {
            "name": "no clone",
            "size":23,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "LongTreeListEnum",
        "children": [
          {
            "name": "no clone",
            "size":10,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionSpace",
        "children": [
          {
            "name": "no clone",
            "size":24,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "CommandInsert",
        "children": [
          {
            "name": "no clone",
            "size":129,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionLog",
        "children": [
          {
            "name": "no clone",
            "size":8,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TransactionStep",
        "children": [
          {
            "name": "no clone",
            "size":12,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionLCase",
        "children": [
          {
            "name": "no clone",
            "size":17,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionDegrees",
        "children": [
          {
            "name": "no clone",
            "size":8,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionLog10",
        "children": [
          {
            "name": "no clone",
            "size":9,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "SSDatabaseMetaData",
        "children": [
          {
            "name": "no clone",
            "size":664,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "StoreNull",
        "children": [
          {
            "name": "no clone",
            "size":58,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "MutableLong",
        "children": [
          {
            "name": "no clone",
            "size":25,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "MutableNumeric",
        "children": [
          {
            "name": "no clone",
            "size":427,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "ExpressionFunctionTimestampDiff",
        "children": [
          {
            "name": "no clone",
            "size":104,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "Database",
        "children": [
          {
            "name": "no clone",
            "size":384,
            "cloneclass": "-1"
          }
        ]
      }
      ]
    },
    {
      "name":"tools",
      "children": [
      {
        "name": "CommandLine",
        "children": [
          {
            "name": "no clone",
            "size":65,
            "cloneclass": "-1"
          }
        ]
      }
      ]
    },
    {
      "name":"junit",
      "children": [
      {
        "name": "TestDeleteUpdate",
        "children": [
          {
            "name": "no clone",
            "size":94,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestGroupBy",
        "children": [
          {
            "name": "no clone",
            "size":263,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestIdentifer",
        "children": [
          {
            "name": "no clone",
            "size":21,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestTokenizer",
        "children": [
          {
            "name": "no clone",
            "size":105,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestDBMetaData",
        "children": [
          {
            "name": "no clone",
            "size":217,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "BasicTestCase",
        "children": [
          {
            "name": "",
            "size":8,
            "cloneclass": "10",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/BasicTestCase.java</h3><table><tr><td>102</td><td>private static String bytes2hex( byte[] bytes ){</td></tr><tr><td>103</td><td>StringBuffer buf = new StringBuffer(bytes.length &lt;&lt; 1);</td></tr><tr><td>104</td><td>for(int i=0; i&lt;bytes.length; i++){</td></tr><tr><td>105</td><td>buf.append( digits[ (bytes[i] &gt;&gt; 4) & 0x0F ] );</td></tr><tr><td>106</td><td>buf.append( digits[ (bytes[i]     ) & 0x0F ] );</td></tr><tr><td>107</td><td>}</td></tr><tr><td>108</td><td>return buf.toString();</td></tr><tr><td>109</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/Utils.java</h3><table><tr><td>205</td><td>private static String bytes2hex( byte[] bytes ){</td></tr><tr><td>206</td><td>StringBuffer buf = new StringBuffer(bytes.length &lt;&lt; 1);</td></tr><tr><td>207</td><td>for(int i=0; i&lt;bytes.length; i++){</td></tr><tr><td>208</td><td>buf.append( digits[ (bytes[i] &gt;&gt; 4) & 0x0F ] );</td></tr><tr><td>209</td><td>buf.append( digits[ (bytes[i]     ) & 0x0F ] );</td></tr><tr><td>210</td><td>}</td></tr><tr><td>211</td><td>return buf.toString();</td></tr><tr><td>212</td><td>}</td></tr></table>"
          },
          {
            "name": "",
            "size":8,
            "cloneclass": "16",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/BasicTestCase.java</h3><table><tr><td>102</td><td>{</td></tr><tr><td>103</td><td>        StringBuffer buf = new StringBuffer(bytes.length &lt;&lt; 1);</td></tr><tr><td>104</td><td>        for(int i=0; i&lt;bytes.length; i++){</td></tr><tr><td>105</td><td>            buf.append( digits[ (bytes[i] &gt;&gt; 4) & 0x0F ] );</td></tr><tr><td>106</td><td>            buf.append( digits[ (bytes[i]     ) & 0x0F ] );</td></tr><tr><td>107</td><td>        }</td></tr><tr><td>108</td><td>        return buf.toString();</td></tr><tr><td>109</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/database/Utils.java</h3><table><tr><td>205</td><td>{</td></tr><tr><td>206</td><td>        StringBuffer buf = new StringBuffer(bytes.length &lt;&lt; 1);</td></tr><tr><td>207</td><td>        for(int i=0; i&lt;bytes.length; i++){</td></tr><tr><td>208</td><td>            buf.append( digits[ (bytes[i] &gt;&gt; 4) & 0x0F ] );</td></tr><tr><td>209</td><td>            buf.append( digits[ (bytes[i]     ) & 0x0F ] );</td></tr><tr><td>210</td><td>        }</td></tr><tr><td>211</td><td>        return buf.toString();</td></tr><tr><td>212</td><td>    }</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":267,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestThreads",
        "children": [
          {
            "name": "no clone",
            "size":111,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestDataTypes",
        "children": [
          {
            "name": "",
            "size":10,
            "cloneclass": "13",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestDataTypes.java</h3><table><tr><td>68</td><td>{</td></tr><tr><td>69</td><td>        try{</td></tr><tr><td>70</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>71</td><td>            Statement st = con.createStatement();</td></tr><tr><td>72</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>73</td><td>            st.close();</td></tr><tr><td>74</td><td>        }catch(Throwable e){</td></tr><tr><td>75</td><td>            //e.printStackTrace();</td></tr><tr><td>76</td><td>        }</td></tr><tr><td>77</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestFunctions.java</h3><table><tr><td>374</td><td>{</td></tr><tr><td>375</td><td>        try{</td></tr><tr><td>376</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>377</td><td>            Statement st = con.createStatement();</td></tr><tr><td>378</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>379</td><td>            st.close();</td></tr><tr><td>380</td><td>        }catch(Throwable e){</td></tr><tr><td>381</td><td>            //e.printStackTrace();</td></tr><tr><td>382</td><td>        }</td></tr><tr><td>383</td><td>    }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java</h3><table><tr><td>95</td><td>{</td></tr><tr><td>96</td><td>        try{</td></tr><tr><td>97</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>98</td><td>            Statement st = con.createStatement();</td></tr><tr><td>99</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>100</td><td>            st.close();</td></tr><tr><td>101</td><td>        }catch(Throwable e){</td></tr><tr><td>102</td><td>            //e.printStackTrace();</td></tr><tr><td>103</td><td>        }</td></tr><tr><td>104</td><td>    }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestMoneyRounding.java</h3><table><tr><td>53</td><td>{</td></tr><tr><td>54</td><td>        try{</td></tr><tr><td>55</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>56</td><td>            Statement st = con.createStatement();</td></tr><tr><td>57</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>58</td><td>            st.close();</td></tr><tr><td>59</td><td>        }catch(Throwable e){</td></tr><tr><td>60</td><td>            //e.printStackTrace();</td></tr><tr><td>61</td><td>        }</td></tr><tr><td>62</td><td>    }</td></tr></table>"
          },
          {
            "name": "",
            "size":8,
            "cloneclass": "18",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestDataTypes.java</h3><table><tr><td>69</td><td>try{</td></tr><tr><td>70</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>71</td><td>            Statement st = con.createStatement();</td></tr><tr><td>72</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>73</td><td>            st.close();</td></tr><tr><td>74</td><td>        }catch(Throwable e){</td></tr><tr><td>75</td><td>            //e.printStackTrace();</td></tr><tr><td>76</td><td>        }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestMoneyRounding.java</h3><table><tr><td>54</td><td>try{</td></tr><tr><td>55</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>56</td><td>            Statement st = con.createStatement();</td></tr><tr><td>57</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>58</td><td>            st.close();</td></tr><tr><td>59</td><td>        }catch(Throwable e){</td></tr><tr><td>60</td><td>            //e.printStackTrace();</td></tr><tr><td>61</td><td>        }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestFunctions.java</h3><table><tr><td>375</td><td>try{</td></tr><tr><td>376</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>377</td><td>            Statement st = con.createStatement();</td></tr><tr><td>378</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>379</td><td>            st.close();</td></tr><tr><td>380</td><td>        }catch(Throwable e){</td></tr><tr><td>381</td><td>            //e.printStackTrace();</td></tr><tr><td>382</td><td>        }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java</h3><table><tr><td>96</td><td>try{</td></tr><tr><td>97</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>98</td><td>            Statement st = con.createStatement();</td></tr><tr><td>99</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>100</td><td>            st.close();</td></tr><tr><td>101</td><td>        }catch(Throwable e){</td></tr><tr><td>102</td><td>            //e.printStackTrace();</td></tr><tr><td>103</td><td>        }</td></tr></table>"
          },
          {
            "name": "",
            "size":10,
            "cloneclass": "8",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestDataTypes.java</h3><table><tr><td>68</td><td>public void tearDown(){</td></tr><tr><td>69</td><td>        try{</td></tr><tr><td>70</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>71</td><td>            Statement st = con.createStatement();</td></tr><tr><td>72</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>73</td><td>            st.close();</td></tr><tr><td>74</td><td>        }catch(Throwable e){</td></tr><tr><td>75</td><td>            //e.printStackTrace();</td></tr><tr><td>76</td><td>        }</td></tr><tr><td>77</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestFunctions.java</h3><table><tr><td>374</td><td>public void tearDown(){</td></tr><tr><td>375</td><td>        try{</td></tr><tr><td>376</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>377</td><td>            Statement st = con.createStatement();</td></tr><tr><td>378</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>379</td><td>            st.close();</td></tr><tr><td>380</td><td>        }catch(Throwable e){</td></tr><tr><td>381</td><td>            //e.printStackTrace();</td></tr><tr><td>382</td><td>        }</td></tr><tr><td>383</td><td>    }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java</h3><table><tr><td>95</td><td>public void tearDown(){</td></tr><tr><td>96</td><td>        try{</td></tr><tr><td>97</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>98</td><td>            Statement st = con.createStatement();</td></tr><tr><td>99</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>100</td><td>            st.close();</td></tr><tr><td>101</td><td>        }catch(Throwable e){</td></tr><tr><td>102</td><td>            //e.printStackTrace();</td></tr><tr><td>103</td><td>        }</td></tr><tr><td>104</td><td>    }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestMoneyRounding.java</h3><table><tr><td>53</td><td>public void tearDown(){</td></tr><tr><td>54</td><td>        try{</td></tr><tr><td>55</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>56</td><td>            Statement st = con.createStatement();</td></tr><tr><td>57</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>58</td><td>            st.close();</td></tr><tr><td>59</td><td>        }catch(Throwable e){</td></tr><tr><td>60</td><td>            //e.printStackTrace();</td></tr><tr><td>61</td><td>        }</td></tr><tr><td>62</td><td>    }</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":251,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestOrderBy",
        "children": [
          {
            "name": "",
            "size":8,
            "cloneclass": "9",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java</h3><table><tr><td>239</td><td>{</td></tr><tr><td>240</td><td>String newValue = rs.getString(&#x22;v&#x22;);</td></tr><tr><td>241</td><td>if(newValue != null){</td></tr><tr><td>242</td><td>assertTrue( oldValue.compareTo( newValue ) &gt; 0 );</td></tr><tr><td>243</td><td>count++;</td></tr><tr><td>244</td><td>}</td></tr><tr><td>245</td><td>oldValue = newValue;</td></tr><tr><td>246</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java</h3><table><tr><td>211</td><td>{</td></tr><tr><td>212</td><td>String newValue = rs.getString(&#x22;v&#x22;);</td></tr><tr><td>213</td><td>if(newValue != null){</td></tr><tr><td>214</td><td>assertTrue( oldValue.compareTo( newValue ) &gt; 0 );</td></tr><tr><td>215</td><td>count++;</td></tr><tr><td>216</td><td>}</td></tr><tr><td>217</td><td>oldValue = newValue;</td></tr><tr><td>218</td><td>}</td></tr></table>"
          },
          {
            "name": "",
            "size":8,
            "cloneclass": "9",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java</h3><table><tr><td>211</td><td>{</td></tr><tr><td>212</td><td>String newValue = rs.getString(&#x22;v&#x22;);</td></tr><tr><td>213</td><td>if(newValue != null){</td></tr><tr><td>214</td><td>assertTrue( oldValue.compareTo( newValue ) &gt; 0 );</td></tr><tr><td>215</td><td>count++;</td></tr><tr><td>216</td><td>}</td></tr><tr><td>217</td><td>oldValue = newValue;</td></tr><tr><td>218</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java</h3><table><tr><td>239</td><td>{</td></tr><tr><td>240</td><td>String newValue = rs.getString(&#x22;v&#x22;);</td></tr><tr><td>241</td><td>if(newValue != null){</td></tr><tr><td>242</td><td>assertTrue( oldValue.compareTo( newValue ) &gt; 0 );</td></tr><tr><td>243</td><td>count++;</td></tr><tr><td>244</td><td>}</td></tr><tr><td>245</td><td>oldValue = newValue;</td></tr><tr><td>246</td><td>}</td></tr></table>"
          },
          {
            "name": "",
            "size":8,
            "cloneclass": "2",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java</h3><table><tr><td>239</td><td>while(oldValue != null && rs.next()){</td></tr><tr><td>240</td><td>String newValue = rs.getString(&#x22;v&#x22;);</td></tr><tr><td>241</td><td>if(newValue != null){</td></tr><tr><td>242</td><td>assertTrue( oldValue.compareTo( newValue ) &gt; 0 );</td></tr><tr><td>243</td><td>count++;</td></tr><tr><td>244</td><td>}</td></tr><tr><td>245</td><td>oldValue = newValue;</td></tr><tr><td>246</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java</h3><table><tr><td>211</td><td>while(oldValue != null && rs.next()){</td></tr><tr><td>212</td><td>String newValue = rs.getString(&#x22;v&#x22;);</td></tr><tr><td>213</td><td>if(newValue != null){</td></tr><tr><td>214</td><td>assertTrue( oldValue.compareTo( newValue ) &gt; 0 );</td></tr><tr><td>215</td><td>count++;</td></tr><tr><td>216</td><td>}</td></tr><tr><td>217</td><td>oldValue = newValue;</td></tr><tr><td>218</td><td>}</td></tr></table>"
          },
          {
            "name": "",
            "size":8,
            "cloneclass": "2",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java</h3><table><tr><td>211</td><td>while(oldValue != null && rs.next()){</td></tr><tr><td>212</td><td>String newValue = rs.getString(&#x22;v&#x22;);</td></tr><tr><td>213</td><td>if(newValue != null){</td></tr><tr><td>214</td><td>assertTrue( oldValue.compareTo( newValue ) &gt; 0 );</td></tr><tr><td>215</td><td>count++;</td></tr><tr><td>216</td><td>}</td></tr><tr><td>217</td><td>oldValue = newValue;</td></tr><tr><td>218</td><td>}</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java</h3><table><tr><td>239</td><td>while(oldValue != null && rs.next()){</td></tr><tr><td>240</td><td>String newValue = rs.getString(&#x22;v&#x22;);</td></tr><tr><td>241</td><td>if(newValue != null){</td></tr><tr><td>242</td><td>assertTrue( oldValue.compareTo( newValue ) &gt; 0 );</td></tr><tr><td>243</td><td>count++;</td></tr><tr><td>244</td><td>}</td></tr><tr><td>245</td><td>oldValue = newValue;</td></tr><tr><td>246</td><td>}</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":581,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestResultSet",
        "children": [
          {
            "name": "no clone",
            "size":185,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestScrollable",
        "children": [
          {
            "name": "no clone",
            "size":229,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestExceptionMethods",
        "children": [
          {
            "name": "no clone",
            "size":231,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestExceptions",
        "children": [
          {
            "name": "no clone",
            "size":89,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestAlterTable2",
        "children": [
          {
            "name": "",
            "size":7,
            "cloneclass": "11",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestAlterTable2.java</h3><table><tr><td>20</td><td>{</td></tr><tr><td>21</td><td>        try {</td></tr><tr><td>22</td><td>            dropTable( AllTests.getConnection(), table );</td></tr><tr><td>23</td><td>        } catch (SQLException ex) {</td></tr><tr><td>24</td><td>            ex.printStackTrace();</td></tr><tr><td>25</td><td>        }</td></tr><tr><td>26</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestAlterTable.java</h3><table><tr><td>39</td><td>{</td></tr><tr><td>40</td><td>        try {</td></tr><tr><td>41</td><td>            dropTable( AllTests.getConnection(), table );</td></tr><tr><td>42</td><td>        } catch (SQLException ex) {</td></tr><tr><td>43</td><td>            ex.printStackTrace();</td></tr><tr><td>44</td><td>        }</td></tr><tr><td>45</td><td>    }</td></tr></table>"
          },
          {
            "name": "",
            "size":7,
            "cloneclass": "5",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestAlterTable2.java</h3><table><tr><td>20</td><td>public void tearDown(){</td></tr><tr><td>21</td><td>        try {</td></tr><tr><td>22</td><td>            dropTable( AllTests.getConnection(), table );</td></tr><tr><td>23</td><td>        } catch (SQLException ex) {</td></tr><tr><td>24</td><td>            ex.printStackTrace();</td></tr><tr><td>25</td><td>        }</td></tr><tr><td>26</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestAlterTable.java</h3><table><tr><td>39</td><td>public void tearDown(){</td></tr><tr><td>40</td><td>        try {</td></tr><tr><td>41</td><td>            dropTable( AllTests.getConnection(), table );</td></tr><tr><td>42</td><td>        } catch (SQLException ex) {</td></tr><tr><td>43</td><td>            ex.printStackTrace();</td></tr><tr><td>44</td><td>        }</td></tr><tr><td>45</td><td>    }</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":46,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestOperatoren",
        "children": [
          {
            "name": "",
            "size":10,
            "cloneclass": "13",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java</h3><table><tr><td>95</td><td>{</td></tr><tr><td>96</td><td>        try{</td></tr><tr><td>97</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>98</td><td>            Statement st = con.createStatement();</td></tr><tr><td>99</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>100</td><td>            st.close();</td></tr><tr><td>101</td><td>        }catch(Throwable e){</td></tr><tr><td>102</td><td>            //e.printStackTrace();</td></tr><tr><td>103</td><td>        }</td></tr><tr><td>104</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestFunctions.java</h3><table><tr><td>374</td><td>{</td></tr><tr><td>375</td><td>        try{</td></tr><tr><td>376</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>377</td><td>            Statement st = con.createStatement();</td></tr><tr><td>378</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>379</td><td>            st.close();</td></tr><tr><td>380</td><td>        }catch(Throwable e){</td></tr><tr><td>381</td><td>            //e.printStackTrace();</td></tr><tr><td>382</td><td>        }</td></tr><tr><td>383</td><td>    }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestMoneyRounding.java</h3><table><tr><td>53</td><td>{</td></tr><tr><td>54</td><td>        try{</td></tr><tr><td>55</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>56</td><td>            Statement st = con.createStatement();</td></tr><tr><td>57</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>58</td><td>            st.close();</td></tr><tr><td>59</td><td>        }catch(Throwable e){</td></tr><tr><td>60</td><td>            //e.printStackTrace();</td></tr><tr><td>61</td><td>        }</td></tr><tr><td>62</td><td>    }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestDataTypes.java</h3><table><tr><td>68</td><td>{</td></tr><tr><td>69</td><td>        try{</td></tr><tr><td>70</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>71</td><td>            Statement st = con.createStatement();</td></tr><tr><td>72</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>73</td><td>            st.close();</td></tr><tr><td>74</td><td>        }catch(Throwable e){</td></tr><tr><td>75</td><td>            //e.printStackTrace();</td></tr><tr><td>76</td><td>        }</td></tr><tr><td>77</td><td>    }</td></tr></table>"
          },
          {
            "name": "",
            "size":7,
            "cloneclass": "19",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java</h3><table><tr><td>267</td><td>{</td></tr><tr><td>268</td><td>        TestValue value = new TestValue();</td></tr><tr><td>269</td><td>        value.dataType  = dataType;</td></tr><tr><td>270</td><td>        value.small     = small;</td></tr><tr><td>271</td><td>        value.large     = large;</td></tr><tr><td>272</td><td>        return value;</td></tr><tr><td>273</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestJoins.java</h3><table><tr><td>204</td><td>{</td></tr><tr><td>205</td><td>        TestValue value = new TestValue();</td></tr><tr><td>206</td><td>        value.dataType  = dataType;</td></tr><tr><td>207</td><td>        value.small     = small;</td></tr><tr><td>208</td><td>        value.large     = large;</td></tr><tr><td>209</td><td>        return value;</td></tr><tr><td>210</td><td>    }</td></tr></table>"
          },
          {
            "name": "",
            "size":8,
            "cloneclass": "18",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java</h3><table><tr><td>96</td><td>try{</td></tr><tr><td>97</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>98</td><td>            Statement st = con.createStatement();</td></tr><tr><td>99</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>100</td><td>            st.close();</td></tr><tr><td>101</td><td>        }catch(Throwable e){</td></tr><tr><td>102</td><td>            //e.printStackTrace();</td></tr><tr><td>103</td><td>        }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestMoneyRounding.java</h3><table><tr><td>54</td><td>try{</td></tr><tr><td>55</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>56</td><td>            Statement st = con.createStatement();</td></tr><tr><td>57</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>58</td><td>            st.close();</td></tr><tr><td>59</td><td>        }catch(Throwable e){</td></tr><tr><td>60</td><td>            //e.printStackTrace();</td></tr><tr><td>61</td><td>        }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestFunctions.java</h3><table><tr><td>375</td><td>try{</td></tr><tr><td>376</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>377</td><td>            Statement st = con.createStatement();</td></tr><tr><td>378</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>379</td><td>            st.close();</td></tr><tr><td>380</td><td>        }catch(Throwable e){</td></tr><tr><td>381</td><td>            //e.printStackTrace();</td></tr><tr><td>382</td><td>        }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestDataTypes.java</h3><table><tr><td>69</td><td>try{</td></tr><tr><td>70</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>71</td><td>            Statement st = con.createStatement();</td></tr><tr><td>72</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>73</td><td>            st.close();</td></tr><tr><td>74</td><td>        }catch(Throwable e){</td></tr><tr><td>75</td><td>            //e.printStackTrace();</td></tr><tr><td>76</td><td>        }</td></tr></table>"
          },
          {
            "name": "",
            "size":7,
            "cloneclass": "25",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java</h3><table><tr><td>267</td><td>private static TestValue a(String dataType, Object small, Object large){</td></tr><tr><td>268</td><td>        TestValue value = new TestValue();</td></tr><tr><td>269</td><td>        value.dataType  = dataType;</td></tr><tr><td>270</td><td>        value.small     = small;</td></tr><tr><td>271</td><td>        value.large     = large;</td></tr><tr><td>272</td><td>        return value;</td></tr><tr><td>273</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestJoins.java</h3><table><tr><td>204</td><td>private static TestValue a(String dataType, Object small, Object large){</td></tr><tr><td>205</td><td>        TestValue value = new TestValue();</td></tr><tr><td>206</td><td>        value.dataType  = dataType;</td></tr><tr><td>207</td><td>        value.small     = small;</td></tr><tr><td>208</td><td>        value.large     = large;</td></tr><tr><td>209</td><td>        return value;</td></tr><tr><td>210</td><td>    }</td></tr></table>"
          },
          {
            "name": "",
            "size":10,
            "cloneclass": "8",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java</h3><table><tr><td>95</td><td>public void tearDown(){</td></tr><tr><td>96</td><td>        try{</td></tr><tr><td>97</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>98</td><td>            Statement st = con.createStatement();</td></tr><tr><td>99</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>100</td><td>            st.close();</td></tr><tr><td>101</td><td>        }catch(Throwable e){</td></tr><tr><td>102</td><td>            //e.printStackTrace();</td></tr><tr><td>103</td><td>        }</td></tr><tr><td>104</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestFunctions.java</h3><table><tr><td>374</td><td>public void tearDown(){</td></tr><tr><td>375</td><td>        try{</td></tr><tr><td>376</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>377</td><td>            Statement st = con.createStatement();</td></tr><tr><td>378</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>379</td><td>            st.close();</td></tr><tr><td>380</td><td>        }catch(Throwable e){</td></tr><tr><td>381</td><td>            //e.printStackTrace();</td></tr><tr><td>382</td><td>        }</td></tr><tr><td>383</td><td>    }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestMoneyRounding.java</h3><table><tr><td>53</td><td>public void tearDown(){</td></tr><tr><td>54</td><td>        try{</td></tr><tr><td>55</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>56</td><td>            Statement st = con.createStatement();</td></tr><tr><td>57</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>58</td><td>            st.close();</td></tr><tr><td>59</td><td>        }catch(Throwable e){</td></tr><tr><td>60</td><td>            //e.printStackTrace();</td></tr><tr><td>61</td><td>        }</td></tr><tr><td>62</td><td>    }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestDataTypes.java</h3><table><tr><td>68</td><td>public void tearDown(){</td></tr><tr><td>69</td><td>        try{</td></tr><tr><td>70</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>71</td><td>            Statement st = con.createStatement();</td></tr><tr><td>72</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>73</td><td>            st.close();</td></tr><tr><td>74</td><td>        }catch(Throwable e){</td></tr><tr><td>75</td><td>            //e.printStackTrace();</td></tr><tr><td>76</td><td>        }</td></tr><tr><td>77</td><td>    }</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":166,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "AllTests",
        "children": [
          {
            "name": "no clone",
            "size":71,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestAlterTable",
        "children": [
          {
            "name": "",
            "size":7,
            "cloneclass": "11",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestAlterTable.java</h3><table><tr><td>39</td><td>{</td></tr><tr><td>40</td><td>        try {</td></tr><tr><td>41</td><td>            dropTable( AllTests.getConnection(), table );</td></tr><tr><td>42</td><td>        } catch (SQLException ex) {</td></tr><tr><td>43</td><td>            ex.printStackTrace();</td></tr><tr><td>44</td><td>        }</td></tr><tr><td>45</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestAlterTable2.java</h3><table><tr><td>20</td><td>{</td></tr><tr><td>21</td><td>        try {</td></tr><tr><td>22</td><td>            dropTable( AllTests.getConnection(), table );</td></tr><tr><td>23</td><td>        } catch (SQLException ex) {</td></tr><tr><td>24</td><td>            ex.printStackTrace();</td></tr><tr><td>25</td><td>        }</td></tr><tr><td>26</td><td>    }</td></tr></table>"
          },
          {
            "name": "",
            "size":7,
            "cloneclass": "5",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestAlterTable.java</h3><table><tr><td>39</td><td>public void tearDown(){</td></tr><tr><td>40</td><td>        try {</td></tr><tr><td>41</td><td>            dropTable( AllTests.getConnection(), table );</td></tr><tr><td>42</td><td>        } catch (SQLException ex) {</td></tr><tr><td>43</td><td>            ex.printStackTrace();</td></tr><tr><td>44</td><td>        }</td></tr><tr><td>45</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestAlterTable2.java</h3><table><tr><td>20</td><td>public void tearDown(){</td></tr><tr><td>21</td><td>        try {</td></tr><tr><td>22</td><td>            dropTable( AllTests.getConnection(), table );</td></tr><tr><td>23</td><td>        } catch (SQLException ex) {</td></tr><tr><td>24</td><td>            ex.printStackTrace();</td></tr><tr><td>25</td><td>        }</td></tr><tr><td>26</td><td>    }</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":82,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestMoneyRounding",
        "children": [
          {
            "name": "",
            "size":10,
            "cloneclass": "13",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestMoneyRounding.java</h3><table><tr><td>53</td><td>{</td></tr><tr><td>54</td><td>        try{</td></tr><tr><td>55</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>56</td><td>            Statement st = con.createStatement();</td></tr><tr><td>57</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>58</td><td>            st.close();</td></tr><tr><td>59</td><td>        }catch(Throwable e){</td></tr><tr><td>60</td><td>            //e.printStackTrace();</td></tr><tr><td>61</td><td>        }</td></tr><tr><td>62</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestFunctions.java</h3><table><tr><td>374</td><td>{</td></tr><tr><td>375</td><td>        try{</td></tr><tr><td>376</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>377</td><td>            Statement st = con.createStatement();</td></tr><tr><td>378</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>379</td><td>            st.close();</td></tr><tr><td>380</td><td>        }catch(Throwable e){</td></tr><tr><td>381</td><td>            //e.printStackTrace();</td></tr><tr><td>382</td><td>        }</td></tr><tr><td>383</td><td>    }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java</h3><table><tr><td>95</td><td>{</td></tr><tr><td>96</td><td>        try{</td></tr><tr><td>97</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>98</td><td>            Statement st = con.createStatement();</td></tr><tr><td>99</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>100</td><td>            st.close();</td></tr><tr><td>101</td><td>        }catch(Throwable e){</td></tr><tr><td>102</td><td>            //e.printStackTrace();</td></tr><tr><td>103</td><td>        }</td></tr><tr><td>104</td><td>    }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestDataTypes.java</h3><table><tr><td>68</td><td>{</td></tr><tr><td>69</td><td>        try{</td></tr><tr><td>70</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>71</td><td>            Statement st = con.createStatement();</td></tr><tr><td>72</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>73</td><td>            st.close();</td></tr><tr><td>74</td><td>        }catch(Throwable e){</td></tr><tr><td>75</td><td>            //e.printStackTrace();</td></tr><tr><td>76</td><td>        }</td></tr><tr><td>77</td><td>    }</td></tr></table>"
          },
          {
            "name": "",
            "size":8,
            "cloneclass": "18",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestMoneyRounding.java</h3><table><tr><td>54</td><td>try{</td></tr><tr><td>55</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>56</td><td>            Statement st = con.createStatement();</td></tr><tr><td>57</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>58</td><td>            st.close();</td></tr><tr><td>59</td><td>        }catch(Throwable e){</td></tr><tr><td>60</td><td>            //e.printStackTrace();</td></tr><tr><td>61</td><td>        }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestFunctions.java</h3><table><tr><td>375</td><td>try{</td></tr><tr><td>376</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>377</td><td>            Statement st = con.createStatement();</td></tr><tr><td>378</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>379</td><td>            st.close();</td></tr><tr><td>380</td><td>        }catch(Throwable e){</td></tr><tr><td>381</td><td>            //e.printStackTrace();</td></tr><tr><td>382</td><td>        }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestDataTypes.java</h3><table><tr><td>69</td><td>try{</td></tr><tr><td>70</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>71</td><td>            Statement st = con.createStatement();</td></tr><tr><td>72</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>73</td><td>            st.close();</td></tr><tr><td>74</td><td>        }catch(Throwable e){</td></tr><tr><td>75</td><td>            //e.printStackTrace();</td></tr><tr><td>76</td><td>        }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java</h3><table><tr><td>96</td><td>try{</td></tr><tr><td>97</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>98</td><td>            Statement st = con.createStatement();</td></tr><tr><td>99</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>100</td><td>            st.close();</td></tr><tr><td>101</td><td>        }catch(Throwable e){</td></tr><tr><td>102</td><td>            //e.printStackTrace();</td></tr><tr><td>103</td><td>        }</td></tr></table>"
          },
          {
            "name": "",
            "size":10,
            "cloneclass": "8",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestMoneyRounding.java</h3><table><tr><td>53</td><td>public void tearDown(){</td></tr><tr><td>54</td><td>        try{</td></tr><tr><td>55</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>56</td><td>            Statement st = con.createStatement();</td></tr><tr><td>57</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>58</td><td>            st.close();</td></tr><tr><td>59</td><td>        }catch(Throwable e){</td></tr><tr><td>60</td><td>            //e.printStackTrace();</td></tr><tr><td>61</td><td>        }</td></tr><tr><td>62</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestFunctions.java</h3><table><tr><td>374</td><td>public void tearDown(){</td></tr><tr><td>375</td><td>        try{</td></tr><tr><td>376</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>377</td><td>            Statement st = con.createStatement();</td></tr><tr><td>378</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>379</td><td>            st.close();</td></tr><tr><td>380</td><td>        }catch(Throwable e){</td></tr><tr><td>381</td><td>            //e.printStackTrace();</td></tr><tr><td>382</td><td>        }</td></tr><tr><td>383</td><td>    }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java</h3><table><tr><td>95</td><td>public void tearDown(){</td></tr><tr><td>96</td><td>        try{</td></tr><tr><td>97</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>98</td><td>            Statement st = con.createStatement();</td></tr><tr><td>99</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>100</td><td>            st.close();</td></tr><tr><td>101</td><td>        }catch(Throwable e){</td></tr><tr><td>102</td><td>            //e.printStackTrace();</td></tr><tr><td>103</td><td>        }</td></tr><tr><td>104</td><td>    }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestDataTypes.java</h3><table><tr><td>68</td><td>public void tearDown(){</td></tr><tr><td>69</td><td>        try{</td></tr><tr><td>70</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>71</td><td>            Statement st = con.createStatement();</td></tr><tr><td>72</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>73</td><td>            st.close();</td></tr><tr><td>74</td><td>        }catch(Throwable e){</td></tr><tr><td>75</td><td>            //e.printStackTrace();</td></tr><tr><td>76</td><td>        }</td></tr><tr><td>77</td><td>    }</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":38,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestTransactions",
        "children": [
          {
            "name": "no clone",
            "size":345,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestOther",
        "children": [
          {
            "name": "no clone",
            "size":227,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestJoins",
        "children": [
          {
            "name": "",
            "size":7,
            "cloneclass": "19",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestJoins.java</h3><table><tr><td>204</td><td>{</td></tr><tr><td>205</td><td>        TestValue value = new TestValue();</td></tr><tr><td>206</td><td>        value.dataType  = dataType;</td></tr><tr><td>207</td><td>        value.small     = small;</td></tr><tr><td>208</td><td>        value.large     = large;</td></tr><tr><td>209</td><td>        return value;</td></tr><tr><td>210</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java</h3><table><tr><td>267</td><td>{</td></tr><tr><td>268</td><td>        TestValue value = new TestValue();</td></tr><tr><td>269</td><td>        value.dataType  = dataType;</td></tr><tr><td>270</td><td>        value.small     = small;</td></tr><tr><td>271</td><td>        value.large     = large;</td></tr><tr><td>272</td><td>        return value;</td></tr><tr><td>273</td><td>    }</td></tr></table>"
          },
          {
            "name": "",
            "size":7,
            "cloneclass": "25",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestJoins.java</h3><table><tr><td>204</td><td>private static TestValue a(String dataType, Object small, Object large){</td></tr><tr><td>205</td><td>        TestValue value = new TestValue();</td></tr><tr><td>206</td><td>        value.dataType  = dataType;</td></tr><tr><td>207</td><td>        value.small     = small;</td></tr><tr><td>208</td><td>        value.large     = large;</td></tr><tr><td>209</td><td>        return value;</td></tr><tr><td>210</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java</h3><table><tr><td>267</td><td>private static TestValue a(String dataType, Object small, Object large){</td></tr><tr><td>268</td><td>        TestValue value = new TestValue();</td></tr><tr><td>269</td><td>        value.dataType  = dataType;</td></tr><tr><td>270</td><td>        value.small     = small;</td></tr><tr><td>271</td><td>        value.large     = large;</td></tr><tr><td>272</td><td>        return value;</td></tr><tr><td>273</td><td>    }</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":142,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestStatement",
        "children": [
          {
            "name": "no clone",
            "size":242,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "BenchTest",
        "children": [
          {
            "name": "",
            "size":7,
            "cloneclass": "15",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/BenchTest.java</h3><table><tr><td>322</td><td>// There are not the correct count of rows.</td></tr><tr><td>323</td><td>                if (count == 0){</td></tr><tr><td>324</td><td>                    createTestDataWithClassicInsert( con );</td></tr><tr><td>325</td><td>                    rs = st1.executeQuery( &#x22;SELECT count(*) FROM &#x22; + tableName);</td></tr><tr><td>326</td><td>                    rs.next();</td></tr><tr><td>327</td><td>                    count = rs.getInt(1);</td></tr><tr><td>328</td><td>                }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/BenchTest.java</h3><table><tr><td>208</td><td>// There are not the correct count of rows.</td></tr><tr><td>209</td><td>                if (count == 0){</td></tr><tr><td>210</td><td>                    createTestDataWithClassicInsert( con );</td></tr><tr><td>211</td><td>                    rs = st1.executeQuery( &#x22;SELECT count(*) FROM &#x22; + tableName);</td></tr><tr><td>212</td><td>                    rs.next();</td></tr><tr><td>213</td><td>                    count = rs.getInt(1);</td></tr><tr><td>214</td><td>                }</td></tr></table>"
          },
          {
            "name": "",
            "size":7,
            "cloneclass": "15",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/BenchTest.java</h3><table><tr><td>208</td><td>// There are not the correct count of rows.</td></tr><tr><td>209</td><td>                if (count == 0){</td></tr><tr><td>210</td><td>                    createTestDataWithClassicInsert( con );</td></tr><tr><td>211</td><td>                    rs = st1.executeQuery( &#x22;SELECT count(*) FROM &#x22; + tableName);</td></tr><tr><td>212</td><td>                    rs.next();</td></tr><tr><td>213</td><td>                    count = rs.getInt(1);</td></tr><tr><td>214</td><td>                }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/BenchTest.java</h3><table><tr><td>322</td><td>// There are not the correct count of rows.</td></tr><tr><td>323</td><td>                if (count == 0){</td></tr><tr><td>324</td><td>                    createTestDataWithClassicInsert( con );</td></tr><tr><td>325</td><td>                    rs = st1.executeQuery( &#x22;SELECT count(*) FROM &#x22; + tableName);</td></tr><tr><td>326</td><td>                    rs.next();</td></tr><tr><td>327</td><td>                    count = rs.getInt(1);</td></tr><tr><td>328</td><td>                }</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":575,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestLanguage",
        "children": [
          {
            "name": "no clone",
            "size":185,
            "cloneclass": "-1"
          }
        ]
      },
      {
        "name": "TestFunctions",
        "children": [
          {
            "name": "",
            "size":10,
            "cloneclass": "13",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestFunctions.java</h3><table><tr><td>374</td><td>{</td></tr><tr><td>375</td><td>        try{</td></tr><tr><td>376</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>377</td><td>            Statement st = con.createStatement();</td></tr><tr><td>378</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>379</td><td>            st.close();</td></tr><tr><td>380</td><td>        }catch(Throwable e){</td></tr><tr><td>381</td><td>            //e.printStackTrace();</td></tr><tr><td>382</td><td>        }</td></tr><tr><td>383</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java</h3><table><tr><td>95</td><td>{</td></tr><tr><td>96</td><td>        try{</td></tr><tr><td>97</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>98</td><td>            Statement st = con.createStatement();</td></tr><tr><td>99</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>100</td><td>            st.close();</td></tr><tr><td>101</td><td>        }catch(Throwable e){</td></tr><tr><td>102</td><td>            //e.printStackTrace();</td></tr><tr><td>103</td><td>        }</td></tr><tr><td>104</td><td>    }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestMoneyRounding.java</h3><table><tr><td>53</td><td>{</td></tr><tr><td>54</td><td>        try{</td></tr><tr><td>55</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>56</td><td>            Statement st = con.createStatement();</td></tr><tr><td>57</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>58</td><td>            st.close();</td></tr><tr><td>59</td><td>        }catch(Throwable e){</td></tr><tr><td>60</td><td>            //e.printStackTrace();</td></tr><tr><td>61</td><td>        }</td></tr><tr><td>62</td><td>    }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestDataTypes.java</h3><table><tr><td>68</td><td>{</td></tr><tr><td>69</td><td>        try{</td></tr><tr><td>70</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>71</td><td>            Statement st = con.createStatement();</td></tr><tr><td>72</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>73</td><td>            st.close();</td></tr><tr><td>74</td><td>        }catch(Throwable e){</td></tr><tr><td>75</td><td>            //e.printStackTrace();</td></tr><tr><td>76</td><td>        }</td></tr><tr><td>77</td><td>    }</td></tr></table>"
          },
          {
            "name": "",
            "size":8,
            "cloneclass": "18",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestFunctions.java</h3><table><tr><td>375</td><td>try{</td></tr><tr><td>376</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>377</td><td>            Statement st = con.createStatement();</td></tr><tr><td>378</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>379</td><td>            st.close();</td></tr><tr><td>380</td><td>        }catch(Throwable e){</td></tr><tr><td>381</td><td>            //e.printStackTrace();</td></tr><tr><td>382</td><td>        }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestMoneyRounding.java</h3><table><tr><td>54</td><td>try{</td></tr><tr><td>55</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>56</td><td>            Statement st = con.createStatement();</td></tr><tr><td>57</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>58</td><td>            st.close();</td></tr><tr><td>59</td><td>        }catch(Throwable e){</td></tr><tr><td>60</td><td>            //e.printStackTrace();</td></tr><tr><td>61</td><td>        }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestDataTypes.java</h3><table><tr><td>69</td><td>try{</td></tr><tr><td>70</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>71</td><td>            Statement st = con.createStatement();</td></tr><tr><td>72</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>73</td><td>            st.close();</td></tr><tr><td>74</td><td>        }catch(Throwable e){</td></tr><tr><td>75</td><td>            //e.printStackTrace();</td></tr><tr><td>76</td><td>        }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java</h3><table><tr><td>96</td><td>try{</td></tr><tr><td>97</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>98</td><td>            Statement st = con.createStatement();</td></tr><tr><td>99</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>100</td><td>            st.close();</td></tr><tr><td>101</td><td>        }catch(Throwable e){</td></tr><tr><td>102</td><td>            //e.printStackTrace();</td></tr><tr><td>103</td><td>        }</td></tr></table>"
          },
          {
            "name": "",
            "size":10,
            "cloneclass": "8",
            "codeFragment": "<h1>Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestFunctions.java</h3><table><tr><td>374</td><td>public void tearDown(){</td></tr><tr><td>375</td><td>        try{</td></tr><tr><td>376</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>377</td><td>            Statement st = con.createStatement();</td></tr><tr><td>378</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>379</td><td>            st.close();</td></tr><tr><td>380</td><td>        }catch(Throwable e){</td></tr><tr><td>381</td><td>            //e.printStackTrace();</td></tr><tr><td>382</td><td>        }</td></tr><tr><td>383</td><td>    }</td></tr></table><h1>Clones from Selected CodeFragment</h1><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java</h3><table><tr><td>95</td><td>public void tearDown(){</td></tr><tr><td>96</td><td>        try{</td></tr><tr><td>97</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>98</td><td>            Statement st = con.createStatement();</td></tr><tr><td>99</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>100</td><td>            st.close();</td></tr><tr><td>101</td><td>        }catch(Throwable e){</td></tr><tr><td>102</td><td>            //e.printStackTrace();</td></tr><tr><td>103</td><td>        }</td></tr><tr><td>104</td><td>    }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestMoneyRounding.java</h3><table><tr><td>53</td><td>public void tearDown(){</td></tr><tr><td>54</td><td>        try{</td></tr><tr><td>55</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>56</td><td>            Statement st = con.createStatement();</td></tr><tr><td>57</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>58</td><td>            st.close();</td></tr><tr><td>59</td><td>        }catch(Throwable e){</td></tr><tr><td>60</td><td>            //e.printStackTrace();</td></tr><tr><td>61</td><td>        }</td></tr><tr><td>62</td><td>    }</td></tr></table><h3>/Users/tonheijligers/Documents/WorkspaceSE/smallsql0.21_src/src/smallsql/junit/TestDataTypes.java</h3><table><tr><td>68</td><td>public void tearDown(){</td></tr><tr><td>69</td><td>        try{</td></tr><tr><td>70</td><td>            Connection con = AllTests.getConnection();</td></tr><tr><td>71</td><td>            Statement st = con.createStatement();</td></tr><tr><td>72</td><td>            st.execute(&#x22;drop table &#x22; + table);</td></tr><tr><td>73</td><td>            st.close();</td></tr><tr><td>74</td><td>        }catch(Throwable e){</td></tr><tr><td>75</td><td>            //e.printStackTrace();</td></tr><tr><td>76</td><td>        }</td></tr><tr><td>77</td><td>    }</td></tr></table>"
          },
          {
            "name": "no clone",
            "size":342,
            "cloneclass": "-1"
          }
        ]
      }
      ]
    }
    ]
  }
  ]
}